import React, { useEffect, useState } from "react";
import {
  cancelBorrowRequest,
  getBorrowedBooksByUser,
} from "../../services/borrowApiService";
import { getToken, checkUserAuth } from "../../utils/auth";
import Header from "../../components/Header";
import Footer from "../../components/Footer";
import {
  checkIfReviewedByUser,
  createReview,
} from "../../services/bookService"; // üÜï

const HistoryBorrowByUser = () => {
  const [history, setHistory] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 10;

  const token = getToken();
  const userId = token ? checkUserAuth(token)?.id : null;

  const [isPopupOpen, setIsPopupOpen] = useState(false);
  const [selectedBookId, setSelectedBookId] = useState(null);
  const [rating, setRating] = useState(5);
  const [comment, setComment] = useState("");
  const [submittingReview, setSubmittingReview] = useState(false);
  const [hasReviewed, setHasReviewed] = useState({});
  useEffect(() => {
    if (!userId) {
      setError("Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p.");
      setLoading(false);
      return;
    }

    const fetchData = async () => {
      try {
        const result = await getBorrowedBooksByUser(userId);
        setHistory(result.data || []);
      } catch (err) {
        setError("Kh√¥ng th·ªÉ t·∫£i l·ªãch s·ª≠ m∆∞·ª£n tr·∫£.");
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [userId]);

  useEffect(() => {
    if (history.length > 0) {
      const checkReviews = async () => {
        const reviewStatus = {};
        for (const record of history) {
          const res = await checkIfReviewedByUser(record.bookId._id, userId);
          reviewStatus[record.bookId._id] = res.hasReviewed;
        }
        setHasReviewed(reviewStatus);
      };

      checkReviews();
    }
  }, [history, userId]);

  const totalPages = Math.ceil(history.length / itemsPerPage);
  const paginatedData = history.slice(
    (currentPage - 1) * itemsPerPage,
    currentPage * itemsPerPage
  );

  const handlePrevPage = () => {
    if (currentPage > 1) setCurrentPage((prev) => prev - 1);
  };

  const handleNextPage = () => {
    if (currentPage < totalPages) setCurrentPage((prev) => prev + 1);
  };

  const formatDate = (dateStr, fallback = "Kh√¥ng r√µ") => {
    if (!dateStr) return fallback;
    const d = new Date(dateStr);
    return isNaN(d) ? fallback : d.toLocaleDateString("vi-VN");
  };

  const renderStatus = (status) => {
    switch (status) {
      case "pending":
        return "ƒêang ch·ªù duy·ªát";
      case "pendingPickup":
        return "Ch·ªù l·∫•y s√°ch";
      case "borrowed":
        return "ƒêang m∆∞·ª£n";
      case "returned":
        return "ƒê√£ tr·∫£";
      case "cancelled":
        return "ƒê√£ h·ªßy";
      default:
        return "Kh√¥ng r√µ";
    }
  };

  const handleCancelRequest = async (borrowId) => {
    if (!window.confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën hu·ª∑ y√™u c·∫ßu m∆∞·ª£n s√°ch n√†y?"))
      return;
    try {
      await cancelBorrowRequest(borrowId);
      alert("ƒê√£ hu·ª∑ y√™u c·∫ßu m∆∞·ª£n s√°ch th√†nh c√¥ng.");
      const result = await getBorrowedBooksByUser(userId);
      setHistory(result.data || []);
    } catch (err) {
      alert("Kh√¥ng th·ªÉ hu·ª∑ y√™u c·∫ßu. Vui l√≤ng th·ª≠ l·∫°i sau.");
    }
  };

  const openReviewPopup = (bookId) => {
    setSelectedBookId(bookId);
    setRating(5);
    setComment("");
    setIsPopupOpen(true);
  };

  const closeReviewPopup = () => {
    setIsPopupOpen(false);
    setSelectedBookId(null);
  };

  const handleSubmitReview = async (e) => {
    e.preventDefault();
    if (!selectedBookId) return;

    setSubmittingReview(true);

    try {
      await createReview({ bookId: selectedBookId, rating, comment });
      alert("ƒê√°nh gi√° th√†nh c√¥ng!");
      const result = await getBorrowedBooksByUser(userId);
      setHistory(result.data || []);
      closeReviewPopup();
    } catch (error) {
      alert("G·ª≠i ƒë√°nh gi√° th·∫•t b·∫°i!");
    } finally {
      setSubmittingReview(false);
    }
  };

  return (
    <div
      style={{
        minHeight: "100vh",
        display: "flex",
        flexDirection: "column",
        fontSize: "18px",
      }}
    >
      <Header />
      <div
        style={{
          flex: 1,
          padding: "40px 20px",
          maxWidth: "1200px",
          margin: "0 auto",
          width: "100%",
        }}
      >
        <h2
          style={{
            textAlign: "center",
            marginBottom: "40px",
            fontSize: "28px",
            color: "#2c3e50",
          }}
        >
          üìö L·ªãch s·ª≠ m∆∞·ª£n tr·∫£ c·ªßa b·∫°n
        </h2>

        {loading && <p style={{ textAlign: "center" }}>ƒêang t·∫£i...</p>}
        {error && <p style={{ textAlign: "center", color: "red" }}>{error}</p>}
        {!loading && !error && history.length === 0 && (
          <p style={{ textAlign: "center" }}>B·∫°n ch∆∞a c√≥ l·ªãch s·ª≠ m∆∞·ª£n s√°ch.</p>
        )}

        {!loading && paginatedData.length > 0 && (
          <div style={{ overflowX: "auto" }}>
            <table
              style={{
                width: "100%",
                borderCollapse: "collapse",
                backgroundColor: "#fff",
                boxShadow: "0 4px 16px rgba(0,0,0,0.1)",
                fontSize: "17px",
                borderRadius: "10px",
                overflow: "hidden",
              }}
            >
              <thead style={{ backgroundColor: "#2c3e50", color: "white" }}>
                <tr>
                  <th
                    style={{
                      padding: "15px",
                      textAlign: "left",
                      minWidth: "250px",
                    }}
                  >
                    üìñ T√™n s√°ch & B·∫£n sao
                  </th>
                  <th
                    style={{
                      padding: "15px",
                      textAlign: "left",
                      minWidth: "160px",
                    }}
                  >
                    üìÖ Ng√†y m∆∞·ª£n
                  </th>
                  <th
                    style={{
                      padding: "15px",
                      textAlign: "left",
                      minWidth: "160px",
                    }}
                  >
                    üì¶ Ng√†y tr·∫£
                  </th>
                  <th
                    style={{
                      padding: "15px",
                      textAlign: "left",
                      minWidth: "160px",
                    }}
                  >
                    {" "}
                    Tr·∫°ng th√°i
                  </th>
                  <th
                    style={{
                      padding: "15px",
                      textAlign: "left",
                      minWidth: "160px",
                    }}
                  >
                    üõë H√†nh ƒë·ªông
                  </th>
                </tr>
              </thead>
              <tbody>
                {paginatedData.map((record, index) => (
                  <tr
                    key={index}
                    style={{
                      backgroundColor: index % 2 === 0 ? "#f9f9f9" : "#fff",
                    }}
                  >
                    <td style={{ padding: "15px" }}>
                      <div>{record.bookId?.title || "Kh√¥ng r√µ"}</div>
                      {record.bookCopies?.length > 0 && (
                        <ul
                          style={{
                            marginTop: "5px",
                            paddingLeft: "20px",
                            fontSize: "15px",
                            color: "#555",
                          }}
                        >
                          {record.bookCopies.map((copy) => (
                            <li key={copy._id}>
                              üìé <strong>{copy.barcode}</strong> ‚Äì {copy.status}
                            </li>
                          ))}
                        </ul>
                      )}
                    </td>
                    <td style={{ padding: "15px" }}>
                      {formatDate(record.createdRequestAt)}
                    </td>
                    <td style={{ padding: "15px" }}>
                      {formatDate(record.returnDate, "Ch∆∞a tr·∫£")}
                    </td>
                    <td
                      style={{
                        padding: "15px",
                        color:
                          record.status === "pending"
                            ? "orange"
                            : record.status === "borrowed"
                            ? "blue"
                            : record.status === "cancelled"
                            ? "red"
                            : "green",
                      }}
                    >
                      {renderStatus(record.status)}
                    </td>
                    <td style={{ padding: "15px" }}>
                      {record.status === "pending" && (
                        <button
                          onClick={() => handleCancelRequest(record._id)}
                          style={{
                            padding: "6px 12px",
                            backgroundColor: "#e74c3c",
                            color: "white",
                            border: "none",
                            borderRadius: "4px",
                            cursor: "pointer",
                          }}
                        >
                          Hu·ª∑ y√™u c·∫ßu
                        </button>
                      )}
                      {record.status === "returned" &&
                        (hasReviewed[record.bookId._id] ? (
                          <button
                            style={{
                              padding: "6px 12px",
                              marginTop: "8px",
                              backgroundColor: "#95a5a6",
                              color: "white",
                              border: "none",
                              borderRadius: "4px",
                              cursor: "pointer",
                            }}
                          >
                            ƒê√£ ƒë√°nh gi√°
                          </button>
                        ) : (
                          <button
                            onClick={() => openReviewPopup(record.bookId._id)}
                            style={{
                              padding: "6px 12px",
                              marginTop: "8px",
                              backgroundColor: "#2ecc71",
                              color: "white",
                              border: "none",
                              borderRadius: "4px",
                              cursor: "pointer",
                            }}
                          >
                            üìù ƒê√°nh gi√°
                          </button>
                        ))}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </div>

      {!loading && history.length > 0 && (
        <div
          style={{
            textAlign: "center",
            padding: "10px",
            borderTop: "1px solid #ddd",
            backgroundColor: "#f8f9fa",
          }}
        >
          <button
            onClick={handlePrevPage}
            disabled={currentPage === 1}
            style={{
              marginRight: "10px",
              padding: "6px 14px",
              backgroundColor: "#3498db",
              color: "#fff",
              border: "none",
              borderRadius: "4px",
            }}
          >
            ‚Üê Tr∆∞·ªõc
          </button>
          <span>
            Trang <strong>{currentPage}</strong> / {totalPages}
          </span>
          <button
            onClick={handleNextPage}
            disabled={currentPage === totalPages}
            style={{
              marginLeft: "10px",
              padding: "6px 14px",
              backgroundColor: "#3498db",
              color: "#fff",
              border: "none",
              borderRadius: "4px",
            }}
          >
            Ti·∫øp ‚Üí
          </button>
        </div>
      )}

      {/* üîΩ Popup ƒë√°nh gi√° */}
      {isPopupOpen && (
        <div
          style={{
            position: "fixed",
            top: 0,
            left: 0,
            width: "100%",
            height: "100%",
            backgroundColor: "rgba(0,0,0,0.5)",
            display: "flex",
            alignItems: "center",
            justifyContent: "center",
            zIndex: 999,
          }}
        >
          <div
            style={{
              backgroundColor: "#fff",
              padding: "30px",
              borderRadius: "10px",
              width: "400px",
              maxWidth: "90%",
            }}
          >
            <h3>ƒê√°nh gi√° s√°ch</h3>
            <form onSubmit={handleSubmitReview}>
              <label>S·ªë sao:</label>
              <select
                value={rating}
                onChange={(e) => setRating(Number(e.target.value))}
                style={{ width: "100%", padding: "6px", marginBottom: "12px" }}
              >
                {[5, 4, 3, 2, 1].map((star) => (
                  <option key={star} value={star}>
                    {star} sao
                  </option>
                ))}
              </select>

              <label>B√¨nh lu·∫≠n:</label>
              <textarea
                value={comment}
                onChange={(e) => setComment(e.target.value)}
                placeholder="Vi·∫øt c·∫£m nh·∫≠n..."
                rows={3}
                style={{
                  width: "100%",
                  padding: "8px",
                  marginBottom: "12px",
                  resize: "none",
                }}
              />

              <div style={{ display: "flex", justifyContent: "flex-end" }}>
                <button
                  type="button"
                  onClick={closeReviewPopup}
                  style={{ marginRight: "10px", padding: "6px 12px" }}
                >
                  Hu·ª∑
                </button>
                <button
                  type="submit"
                  disabled={submittingReview}
                  style={{
                    backgroundColor: "#27ae60",
                    color: "#fff",
                    padding: "6px 12px",
                    border: "none",
                    borderRadius: "4px",
                  }}
                >
                  {submittingReview ? "ƒêang g·ª≠i..." : "G·ª≠i"}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
      <Footer />
    </div>
  );
};

export default HistoryBorrowByUser;
